#!/bin/bash

MAX_PARALLEL=2

function echo_color {
    local color="$1"
    shift
    echo -e "\e[${color}m$*\e[0m"
}

# Validação de argumentos
if [ "$#" -lt 2 ]; then
    echo_color "31" "Uso: copykj <origem1> [origem2 ...] <destino>"
    exit 1
fi

DESTINO="${@: -1}"
DESTINO="${DESTINO%/}"

if [ ! -d "$DESTINO" ]; then
    echo_color "31" "Erro: O destino '$DESTINO' não é um diretório."
    exit 1
fi

for cmd in dd numfmt; do
    if ! command -v $cmd &> /dev/null; then
        echo_color "31" "Erro: O comando '$cmd' não está instalado."
        exit 1
    fi
done

sudo -v || { echo_color "31" "Permissão sudo não obtida."; exit 1; }

# Função que copia com barra estilo pacman
copy_file() {
    local ORIGEM="$1"
    local DESTINO_DIR="$2"
    local INDEX="$3"
    local TOTAL="$4"

    local DESTINO_ARQUIVO="$DESTINO_DIR/$(basename "$ORIGEM")"
    local TAMANHO=$(stat --format="%s" "$ORIGEM" 2>/dev/null || echo 0)
    local FILENAME=$(basename "$ORIGEM")

    local START_TIME=$(date +%s)
    local BYTES_COPIED=0

    sudo dd if="$ORIGEM" of="$DESTINO_ARQUIVO" bs=4M oflag=direct status=none &
    local DD_PID=$!

    # Constantes fixas
    local BAR_WIDTH=76

    while kill -0 $DD_PID 2>/dev/null; do
        sleep 0.2
        BYTES_COPIED=$(stat --format="%s" "$DESTINO_ARQUIVO" 2>/dev/null || echo 0)

        local PERCENTAGE=0
        if [[ "$TAMANHO" -gt 0 ]]; then
            PERCENTAGE=$(( BYTES_COPIED * 100 / TAMANHO ))
        fi

        local FILLED=$(( BAR_WIDTH * PERCENTAGE / 100 ))
        local EMPTY=$(( BAR_WIDTH - FILLED ))
        local BAR="$(printf '%*s' "$FILLED" '' | tr ' ' '#')"
        BAR+="$(printf '%*s' "$EMPTY" '' | tr ' ' '-')"

        local NOW=$(numfmt --to=iec-i --suffix=B "$BYTES_COPIED")
        local SPEED=$(( BYTES_COPIED / (($(date +%s) - START_TIME + 1)) ))
        local SPEED_HUMAN=$(numfmt --to=iec-i --suffix=B "$SPEED")

        local ELAPSED=$(( $(date +%s) - START_TIME ))
        local TIME_FMT=$(printf "%02d:%02d" $((ELAPSED / 60)) $((ELAPSED % 60)))

        local INFO="$(printf "%10s %10s %6s [%-*s] %3d%%" \
            "$NOW" "$SPEED_HUMAN" "$TIME_FMT" "$BAR_WIDTH" "$BAR" "$PERCENTAGE")"

        local TERM_WIDTH=$(tput cols)
        local INFO_LEN=${#INFO}
        local SPACE_AVAILABLE=$(( TERM_WIDTH - INFO_LEN - 1 ))

        # Parte esquerda com índice + nome
        local PREFIX="$(printf "(%3d/%3d) - " "$INDEX" "$TOTAL")"
        local FILENAME_DISPLAY="$FILENAME"
        local MAX_LEFT=$(( SPACE_AVAILABLE - ${#PREFIX} ))

        if [[ ${#FILENAME_DISPLAY} -gt $MAX_LEFT ]]; then
            FILENAME_DISPLAY="${FILENAME_DISPLAY:0:$((MAX_LEFT - 3))}..."
        fi

        printf "\r%s%-*s %s" "$PREFIX" "$MAX_LEFT" "$FILENAME_DISPLAY" "$INFO"
    done

    wait $DD_PID

    local FINAL_ELAPSED=$(( $(date +%s) - START_TIME ))
    local TIME_FMT_FINAL=$(printf "%02d:%02d" $((FINAL_ELAPSED / 60)) $((FINAL_ELAPSED % 60)))
    local FINAL_SIZE=$(stat --format="%s" "$DESTINO_ARQUIVO" 2>/dev/null || echo 0)
    local FINAL_HUMAN=$(numfmt --to=iec-i --suffix=B "$FINAL_SIZE")
    local FINAL_BAR="$(printf '%*s' $BAR_WIDTH '' | tr ' ' '#')"
    local FINAL_INFO="$(printf "%10s %10s %6s [%-*s] 100%%" \
        "$FINAL_HUMAN" "$SPEED_HUMAN" "$TIME_FMT_FINAL" "$BAR_WIDTH" "$FINAL_BAR")"

    local TERM_WIDTH=$(tput cols)
    local INFO_LEN=${#FINAL_INFO}
    local SPACE_AVAILABLE=$(( TERM_WIDTH - INFO_LEN - 1 ))

    local PREFIX_FINAL="$(printf "(%3d/%3d) - " "$INDEX" "$TOTAL")"
    local MAX_LEFT=$(( SPACE_AVAILABLE - ${#PREFIX_FINAL} ))

    if [[ ${#FILENAME} -gt $MAX_LEFT ]]; then
        FILENAME_DISPLAY="${FILENAME:0:$((MAX_LEFT - 3))}..."
    else
        FILENAME_DISPLAY="$FILENAME"
    fi

    printf "\r%s%-*s %s\n" "$PREFIX_FINAL" "$MAX_LEFT" "$FILENAME_DISPLAY" "$FINAL_INFO"
}


# Prepara origens
ORIGENS=("${@:1:$(($#-1))}")
TOTAL=${#ORIGENS[@]}

export -f copy_file echo_color
export DESTINO

# Cálculo do total de bytes
TOTAL_BYTES=0
for f in "${ORIGENS[@]}"; do
    SIZE=$(stat --format="%s" "$f" 2>/dev/null || echo 0)
    TOTAL_BYTES=$((TOTAL_BYTES + SIZE))
done

export TOTAL_BYTES

# Paralelismo fixo com semáforo
sem_limite() {
    local -n FILES=$1
    local TOTAL=$2

    pids=()
    slot=0

    for i in "${!FILES[@]}"; do
        while [ "$(jobs -rp | wc -l)" -ge $MAX_PARALLEL ]; do
            wait -n
        done
        copy_file "${FILES[$i]}" "$DESTINO" "$((i+1))" "$TOTAL" &
    done

    wait
}

sem_limite ORIGENS "$TOTAL"


