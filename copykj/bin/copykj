#!/bin/bash

# Função para exibir mensagens coloridas
function echo_color {
    local color="$1"
    shift
    echo -e "\e[${color}m$*\e[0m"
}

# Verifica se há pelo menos 2 argumentos (múltiplas origens + 1 destino)
if [ "$#" -lt 2 ]; then
    echo_color "31" "Uso: copykj <origem1> [origem2 ...] <destino>"
    exit 1
fi

# O último argumento é o destino
DESTINO="${@: -1}"
DESTINO="${DESTINO%/}"  # Remove barra final

# Verifica se o destino é um diretório
if [ ! -d "$DESTINO" ]; then
    echo_color "31" "Erro: O destino '$DESTINO' não é um diretório."
    exit 1
fi

# Verifica se os comandos necessários estão instalados
for cmd in dd numfmt; do
    if ! command -v $cmd &> /dev/null; then
        echo_color "31" "Erro: O comando '$cmd' não está instalado. Instale-o e tente novamente."
        exit 1
    fi
done

# Função para copiar arquivos ou diretórios recursivamente
copy_item() {
    local ORIGEM="$1"
    local DESTINO_DIR="$2"
    ORIGEM="${ORIGEM%/}"  # Remove barra final
    
    if [ -d "$ORIGEM" ]; then
        echo_color "34" "Copiando diretório '$ORIGEM'..."
        find "$ORIGEM" -type f | while read -r file; do
            copy_file "$file" "$DESTINO_DIR"
        done
    elif [ -f "$ORIGEM" ]; then
        copy_file "$ORIGEM" "$DESTINO_DIR"
    else
        echo_color "31" "Erro: '$ORIGEM' não existe."
    fi
}

# Função para copiar um único arquivo com barra de progresso
copy_file() {
    local ORIGEM="$1"
    local DESTINO_DIR="$2"
    local DESTINO_ARQUIVO="$DESTINO_DIR/$(basename "$ORIGEM")"
    
    if [ ! -w "$DESTINO_DIR" ]; then
        echo_color "31" "Erro: Sem permissão para escrever em '$DESTINO_DIR'. Tente executar como root."
        exit 1
    fi
    
    if [ -e "$DESTINO_ARQUIVO" ]; then
        echo_color "33" "Atenção: O arquivo '$DESTINO_ARQUIVO' já existe!"
        echo -n "Deseja sobrescrevê-lo? (y/N): "
        read -r resposta
        case "$resposta" in
            [Yy]*) echo_color "33" "Sobrescrevendo..." ;;
            *) echo_color "31" "Cópia cancelada."; return 1 ;;
        esac
    fi
    
    TAMANHO=$(stat --format="%s" "$ORIGEM")
    TAMANHO_HUMANO=$(numfmt --to=iec-i --suffix=B $TAMANHO)
    echo_color "32" "Copiando '$ORIGEM' ($TAMANHO_HUMANO)..."
    
    START_TIME=$(date +%s)
    BYTES_COPIED=0
    
    sudo dd if="$ORIGEM" of="$DESTINO_ARQUIVO" bs=4M oflag=direct status=none &
    DD_PID=$!
    
    while kill -0 $DD_PID 2>/dev/null; do
        sleep 1
        BYTES_COPIED=$(stat --format="%s" "$DESTINO_ARQUIVO" 2>/dev/null || echo 0)
        PERCENTAGE=$(( BYTES_COPIED * 100 / TAMANHO ))
        ELAPSED_TIME=$(( $(date +%s) - START_TIME ))
        
        if [ $ELAPSED_TIME -gt 0 ]; then
            SPEED=$(( BYTES_COPIED / ELAPSED_TIME ))
            SPEED_HUMANO=$(numfmt --to=iec-i --suffix=B $SPEED)
        else
            SPEED_HUMANO="0B/s"
        fi
        
        COPIED_HUMANO=$(numfmt --to=iec-i --suffix=B $BYTES_COPIED)
        
        if [ $PERCENTAGE -le 25 ]; then
            COLOR="31"
        elif [ $PERCENTAGE -le 50 ]; then
            COLOR="35"
        elif [ $PERCENTAGE -le 75 ]; then
            COLOR="33"
        else
            COLOR="32"
        fi
        
        BAR_LENGTH=50
        FILLED_LENGTH=$(( BAR_LENGTH * PERCENTAGE / 100 ))
        UNFILLED_LENGTH=$(( BAR_LENGTH - FILLED_LENGTH ))
        PROGRESS_BAR=$(printf "%${FILLED_LENGTH}s" | tr ' ' '#')
        PROGRESS_BAR+=$(printf "%${UNFILLED_LENGTH}s" | tr ' ' '-')
        
        echo -ne "Progresso: $COPIED_HUMANO / $TAMANHO_HUMANO - $PERCENTAGE% - $SPEED_HUMANO - [\e[${COLOR}m$PROGRESS_BAR\e[0m]\r"
    done
    
    wait $DD_PID
    ELAPSED_TIME=$(( $(date +%s) - START_TIME ))
    echo -e "\n====================="
    echo_color "32" "Cópia concluída em ${ELAPSED_TIME}s!"
}

# Itera sobre todos os argumentos, exceto o último (destino)
for ((i=1; i<$#; i++)); do
    ORIGEM="${!i}"
    copy_item "$ORIGEM" "$DESTINO"
done

echo_color "32" "Todas as cópias foram concluídas."
